
configurations {
    binaryCompatibility
}

dependencies {
    def excludeList = [
        'ktor-client-tests',
        'ktor-client-js',
        'ktor-client-json-tests',
        'ktor-client-curl',
        'ktor-client-ios',
        'ktor-client',
        'ktor-client-features'
    ].toSet()

    def projects = [].toSet()
    def queue = [project(":ktor-client")]

    while (!queue.isEmpty()) {
        def project = queue.remove(queue.size() - 1) as Project
        if (projects.add(project)) {
            queue += project.childProjects.values()
        }
    }

    binaryCompatibility projects.findAll { !excludeList.contains(it.name) }
}

def buildList = {
    def workQueue = []
    def allModules = new HashSet<ProjectDependency>()

    workQueue += configurations.binaryCompatibility.allDependencies.findAll { it instanceof ProjectDependency }

    while (!workQueue.isEmpty()) {
        def p = workQueue.remove(workQueue.size() - 1)
        if (p instanceof ProjectDependency && allModules.add(p)) {
            p.dependencyProject.configurations.forEach { configuration ->
                if (!configuration.name.toLowerCase().contains('test') && configuration.name.toLowerCase().contains("jvm")) {
                    workQueue += configuration.allDependencies.findAll { it instanceof ProjectDependency }
                }
            }
        }
    }

    return allModules.toList().sort { it.name }
}

project.ext.buildList = buildList

//        println "List of modules: \n" + modulesForBinaryCompatibility.collect { it.name }.sort().join('\n')
